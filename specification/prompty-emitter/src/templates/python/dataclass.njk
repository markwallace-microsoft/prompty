
@dataclass
class {{ node.typeName }}{%- if node.baseType.length > 0 -%}({{ node.baseType }}){%- endif -%}:
    """{%- for line in node.description.split('\n') -%}
    {{ line }}
    {% endfor -%}
    {% if node.properties.length > 0 %}
    Attributes
    ----------
    {% for prop in node.properties -%}
    {{ prop.name }} : {{ renderType(prop) | safe }}
        {{ prop.description }}
    {% endfor %}
    """ 

    {% for prop in node.properties -%}
    {{ prop.name }}: {{ renderType(prop) | safe }}
    {% endfor -%}
    {% else %}
    """
    
    # Fallback for unknown properties
    data: dict = field(default_factory=dict)

    def __getitem__(self, key):
        return self.data[key]

    def __setitem__(self, key, value):
        self.data[key] = value

    def __delitem__(self, key):
        del self.data[key]

    def __contains__(self, key):
        return key in self.data

    def keys(self):
        return self.data.keys()

    def values(self):
        return self.data.values()

    def items(self):
        return self.data.items()

    def __repr__(self):
        return repr(self.data)
    {% endif %}