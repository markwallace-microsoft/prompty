{%- set comma = joiner() -%}
##########################################
# WARNING: This is an auto-generated file.
# DO NOT EDIT THIS FILE DIRECTLY
# ANY EDITS WILL BE LOST
##########################################

{%- if typings and typings.length > 0 %}
from typing import{% for item in typings -%}{{ comma() }} {{ item }}{% endfor %}
{%- endif %}
from dataclasses import dataclass, field
{%- for import in imports %}
from ._{{ import }} import {{ import }}
{%- endfor %}


@dataclass
class {{ node.typeName.name }}{%- if node.base -%}({{ node.base.name }}){%- endif -%}:
    """{%- for line in node.description.split('\n') -%}
    {{ line }}
    {% endfor -%}
    {% if node.properties.length > 0 %}
    Attributes
    ----------
    {% for prop in node.properties -%}
    {{ prop.name }} : {{ renderType(prop) | safe }}
        {{ prop.description }}
    {% endfor %}
    """ 

    {% for prop in node.properties -%}
    {{ prop.name }}: {{ renderType(prop) | safe }}{{ renderDefault(prop) | safe }}
    {% endfor %}
    @staticmethod
    def load(data: Optional[dict] = None) -> "{{ node.typeName.name }}":
        instance = {{ node.typeName.name }}()
        {% for prop in node.properties -%}
        if data is not None and "{{ prop.name }}" in data:
            instance.{{ prop.name }} = {% if prop.isScalar %}data["{{ prop.name }}"]{% else %}{% if prop.isCollection %}{{ node.typeName.name }}.load_{{ prop.name }}{% else %}{{ prop.typeName.name }}.load{% endif %}(data["{{ prop.name }}"]){% endif %}
        {% endfor -%}
        return instance

    {% for prop in node.properties | selectattr("isCollection") %}
    @staticmethod
    def load_{{ prop.name }}(data: Optional[dict] = None) -> list[{{ prop.typeName.name }}]:
        if data is not None and "{{ prop.name }}" in data:
            return [{{ prop.typeName.name }}(item) for item in data["{{ prop.name }}"]]
        else:
            return []
    {% endfor %}
    {% else %}
    """
    # Fallback for unknown properties
    data: dict = field(default_factory=dict)

    @staticmethod
    def load(data: Optional[dict] = None) -> "{{ node.typeName.name }}":
        instance = {{ node.typeName.name }}()
        if data is not None:
            instance.data = data
        return instance

    def __getitem__(self, key):
        return self.data[key]

    def __setitem__(self, key, value):
        self.data[key] = value

    def __delitem__(self, key):
        del self.data[key]

    def __contains__(self, key):
        return key in self.data

    def keys(self):
        return self.data.keys()

    def values(self):
        return self.data.values()

    def items(self):
        return self.data.items()

    def __repr__(self):
        return repr(self.data)
    {% endif %}